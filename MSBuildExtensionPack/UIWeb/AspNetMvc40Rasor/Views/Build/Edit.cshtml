@using UrlStringsAlias = MSBuildExtensionPack.AspNetMvc40Rasor.Helpers.UrlStrings;
@model MSBuildExtensionPack.AspNetMvc40ViewModel.BuildItemVM
<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h2>@Model.ContentData.Title.</h2>
                <h4>@Model.ContentData.Summary</h4>
            </div>
@if (Model.StatusOfResult != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK && Model.StatusOfResult != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.UIProcessReady)
{
            <div class="panel-body">
                <div class="text-danger">@Model.StatusMessageOfResult</div>
            </div>
}
@using (Html.BeginForm(UrlStringsAlias.ActionName_Build_Edit, UrlStringsAlias.ControllerName_Build, FormMethod.Post, new { @class= "form" })) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
            <div class="panel-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.Id, new { @class = "control-label" })
                        <div class="form-control">
                            @Html.DisplayFor(model => model.Item.Id)
                        </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.BuildStartTime, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.BuildStartTime, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Item.BuildStartTime, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.Organization_2Id, new { @class = "control-label" })
                        @Html.HiddenFor(model => model.Item.Organization_2Id)
                        @Html.HiddenFor(model => model.Item.Organization_2_UniqueIdentifier)
                        @Html.HiddenFor(model => model.Item.Organization_2_UniqueidentifierColumn)
                        @Html.DropDownListFor(model => model.Item.Organization_2Id, (List<SelectListItem>)Model.SelectListOfMSBuildExtensionPack_Organization, MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____, new Dictionary<string,Object>{ { "onchange", "FetchOrganization_1();" }, { "class", "form-control" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.Organization_1Id, new { @class = "control-label" })
                        @Html.HiddenFor(model => model.Item.Organization_1Id)
                        @Html.HiddenFor(model => model.Item.Organization_1_UniqueIdentifier)
                        @Html.HiddenFor(model => model.Item.Organization_1_UniqueidentifierColumn)
                        @Html.DropDownListFor(model => model.Item.Organization_1Id, Enumerable.Empty<SelectListItem>(), MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____, new Dictionary<string,Object>{ { "onchange", "FetchSolution_1();" }, { "class", "form-control" }, { "data-bind", string.Format(@"options:selectListOfOrganization_1,optionsCaption:'{0}',optionsText:'name',optionsValue:'value',value:selectedOrganization_1", MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____) } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.SolutionId, new { @class = "control-label" })
                        @Html.HiddenFor(model => model.Item.SolutionId)
                        @Html.DropDownListFor(model => model.Item.SolutionId, Enumerable.Empty<SelectListItem>(), MSBuildExtensionPack.Resx.UIStringResourcePerEntitySolution.Please_select_Solution____, new Dictionary<string,Object>{ { "class", "form-control" }, { "data-bind", string.Format(@"options:selectListOfSolution_1,optionsCaption:'{0}',optionsText:'name',optionsValue:'value',value:selectedSolution_1", MSBuildExtensionPack.Resx.UIStringResourcePerEntitySolution.Please_select_Solution____) } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.Name, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.Name, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.Name, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.Description, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.Description, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.Description, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="panel-footer nopadding">
                <div class="btn-group btn-group-justified" role="group" aria-label="...">
                    <div class="btn-group">
                        <button class="btn btn-primary" role="button" type="submit">
                            <span class="glyphicon glyphicon-ok-sign"></span>
                            <span class="submit-text hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resx.UIStringResource.Save</span>
                        </button>
                    </div>
                    <div class="btn-group">
                        <a href="@Url.Action(UrlStringsAlias.ActionName_Build_Edit, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.Item.Id })" class="btn btn-default" role="button" type="button">
                            <span class="glyphicon glyphicon-refresh"></span><span class="hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resx.UIStringResource.Refresh</span>
                        </a>
                    </div>
                    <div class="btn-group">
                        <a href="@Url.Action(UrlStringsAlias.ActionName_Build_Index)" class="btn btn-default" role="button" type="button">
                            <span class="glyphicon glyphicon-ban-circle"></span><span class="hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resx.UIStringResource.Back</span>
                        </a>
                    </div>
                </div>
            </div>
}
        </div>
    </div>
</div>
@section Scripts {
   <script type="text/javascript">
        $(document).ready($(function() {
            $('input[name="Item.BuildStartTime"]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
        }));
        function FetchOrganization_1() {
            var url = "/api/OrganizationApi/__GetCollectionOfNameValuePairOfByFKOnly";
            try {
                var params = BuildCriteriaForFetchOrganization_1();
                $.getJSON(url, params, function (data) {
                    objVM.selectListOfOrganization_1(data);
                    objVM.selectedOrganization_1(@Model.Item.Organization_1Id);
                });
            }
            catch (e) {
            }
        }
        function BuildCriteriaForFetchOrganization_1() {
            var selectedvalueOrganization_2 = $('select[name="Item.Organization_2Id"]').val();
            var params = {
                ParentId: selectedvalueOrganization_2,
                currentIndex: -1,
                pageSize: -1,
                queryOrderByExpression: null
            };
            return params;
        }
        function FetchSolution_1() {
            var url = "/api/SolutionApi/__GetCollectionOfNameValuePairOfByFKOnly";
            try {
                var params = BuildCriteriaForFetchSolution_1();
                $.getJSON(url, params, function (data) {
                    objVM.selectListOfSolution_1(data);
                    objVM.selectedSolution_1(@Model.Item.SolutionId);
                });
            }
            catch (e) {
            }
        }
        function BuildCriteriaForFetchSolution_1() {
            var selectedvalueOrganization_2 = $('select[name="Item.Organization_2Id"]').val();
            var selectedvalueOrganization_1 = $('select[name="Item.Organization_1Id"]').val();
            var params = {
                Organization_2Id: selectedvalueOrganization_2,
                OrganizationId: selectedvalueOrganization_1,
                currentIndex: -1,
                pageSize: -1,
                queryOrderByExpression: null
            };
            return params;
        }
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
            self.selectListOfOrganization_1 = ko.observableArray([]);
            self.selectedOrganization_1 = ko.observable();
            self.selectListOfSolution_1 = ko.observableArray([]);
            self.selectedSolution_1 = ko.observable();
        }
        var objVM = new CascadingDDLViewModel();
        ko.applyBindings(objVM);
        $('select[name="Item.Organization_2Id"]').change();
    </script>
}
