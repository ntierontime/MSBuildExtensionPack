@using UrlStringsAlias = MSBuildExtensionPack.AspNetMvc40Rasor.Helpers.UrlStrings;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Linq.Expressions;
@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using System.Web.Routing;
@using Framework.Mvc;
@using PagedList.Mvc;
@model MSBuildExtensionPack.AspNetMvc40ViewModel.WPCommonOfOrganizationVM
@{
    RouteValueDictionary queryStringDictionary = new RouteValueDictionary(Request.QueryString.AllKeys.ToDictionary(key => key, key => (object)Request.QueryString[key]));
}
 <div class="row">
 <div class="col-xs-12 col-sm-4 col-md-3 col-lg-3">
        @using (Html.BeginForm())
        {
            <div class="panel panel-default">
                <div class="panel-heading clearfix">
                    <h3 style="display: inline;">@Framework.Resx.UIStringResource.Common_Filter</h3>
                </div>
                <div class="panel-footer nopadding">
<div class="btn-group btn-group-justified" role="group" aria-label="...">
<div class="btn-group">
    <button class="btn btn-default" role="button" type="submit" name="SearchToolBarUp" title="@Framework.Resx.UIStringResource.Search">
        <span class="glyphicon glyphicon-search"></span>
    </button>
</div>
<div class="btn-group">
<a href="@Url.Action(UrlStringsAlias.ActionName_Organization_AddNew, UrlStringsAlias.ControllerName_Organization)" class="btn btn-default" role="button" type="button" name="AddNewToolBarUp" title="@Framework.Resx.UIStringResource.AddNew">
        <span class="glyphicon glyphicon-plus"></span>
    </a>
</div>
<div class="btn-group">
    <a href="location.href='@Url.Action(UrlStringsAlias.ActionName_Organization_WPCommonOfOrganization_Export, UrlStringsAlias.ControllerName_Organization, new RouteValueDictionary { { "dataServiceType", "Csv" } })'" class="btn btn-default" role="button" type="button" name="ExportToolBarUp" title="@Framework.Resx.UIStringResource.Export">
        <span class="glyphicon glyphicon-export"></span>
    </a>
</div>
<div class="btn-group">
    <a href="location.href='@Url.Action(UrlStringsAlias.ActionName_Organization_WPCommonOfOrganization_Export, UrlStringsAlias.ControllerName_Organization, new RouteValueDictionary { { "dataServiceType", "Excel2010" } })'" class="btn btn-default" role="button" type="button" name="ExportToExcelToolBarUp" title="@Framework.Resx.UIStringResource.ExportToExcel">
        <span class="glyphicon glyphicon-export"></span>
    </a>
</div>
<div class="btn-group">
<a href="@Url.Action(UrlStringsAlias.ActionName_Organization_Import, UrlStringsAlias.ControllerName_Organization)" class="btn btn-default" role="button" type="button" name="ImportToolBarUp" title="@Framework.Resx.UIStringResource.Import">
        <span class="glyphicon glyphicon-import"></span>
    </a>
</div>
</div>
                </div>
                <div class="panel-body">
 <div class="form-group">
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareNtextColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareNtextColumnCommonOftOfCommon</label>
</div>
@Html.TextBoxFor(model=>model.Criteria.ValueToBeContainedNtextColumnCommonOftOfCommon, new { @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareNvarcharColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareNvarcharColumnCommonOftOfCommon</label>
</div>
@Html.TextBoxFor(model=>model.Criteria.ValueToBeContainedNvarcharColumnCommonOftOfCommon, new { @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareNcharColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareNcharColumnCommonOftOfCommon</label>
</div>
@Html.TextBoxFor(model=>model.Criteria.ValueToBeContainedNcharColumnCommonOftOfCommon, new { @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareTextColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareTextColumnCommonOftOfCommon</label>
</div>
@Html.TextBoxFor(model=>model.Criteria.ValueToBeContainedTextColumnCommonOftOfCommon, new { @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareVarcharColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareVarcharColumnCommonOftOfCommon</label>
</div>
@Html.TextBoxFor(model=>model.Criteria.ValueToBeContainedVarcharColumnCommonOftOfCommon, new { @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareCharColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareCharColumnCommonOftOfCommon</label>
</div>
@Html.TextBoxFor(model=>model.Criteria.ValueToBeContainedCharColumnCommonOftOfCommon, new { @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareNameCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareNameCommonOftOfCommon</label>
</div>
@Html.TextBoxFor(model=>model.Criteria.ValueToBeContainedNameCommonOftOfCommon, new { @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareDateColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareDateColumnCommonOftOfCommon</label>
</div><input type="text" rangepickername="datefilter" value="" class="form-control" />
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareLowerBoundDateColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareLowerBound_ID_CheckBox_Search_isToCompareLowerBoundDateColumnCommonOftOfCommon</label>
</div>
@Html.TextBox("lowerBoundDateColumnCommonOftOfCommon", Model.Criteria.LowerBoundDateColumnCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareUpperBoundDateColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareUpperBound_ID_CheckBox_Search_isToCompareUpperBoundDateColumnCommonOftOfCommon</label>
</div>
@Html.TextBox("upperBoundDateColumnCommonOftOfCommon", Model.Criteria.UpperBoundDateColumnCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareSmalldatetimeColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareSmalldatetimeColumnCommonOftOfCommon</label>
</div><input type="text" rangepickername="datefilter" value="" class="form-control" />
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareLowerBoundSmalldatetimeColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareLowerBound_ID_CheckBox_Search_isToCompareLowerBoundSmalldatetimeColumnCommonOftOfCommon</label>
</div>
@Html.TextBox("lowerBoundSmalldatetimeColumnCommonOftOfCommon", Model.Criteria.LowerBoundSmalldatetimeColumnCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareUpperBoundSmalldatetimeColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareUpperBound_ID_CheckBox_Search_isToCompareUpperBoundSmalldatetimeColumnCommonOftOfCommon</label>
</div>
@Html.TextBox("upperBoundSmalldatetimeColumnCommonOftOfCommon", Model.Criteria.UpperBoundSmalldatetimeColumnCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareDatetime2ColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareDatetime2ColumnCommonOftOfCommon</label>
</div><input type="text" rangepickername="datefilter" value="" class="form-control" />
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareLowerBoundDatetime2ColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareLowerBound_ID_CheckBox_Search_isToCompareLowerBoundDatetime2ColumnCommonOftOfCommon</label>
</div>
@Html.TextBox("lowerBoundDatetime2ColumnCommonOftOfCommon", Model.Criteria.LowerBoundDatetime2ColumnCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareUpperBoundDatetime2ColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareUpperBound_ID_CheckBox_Search_isToCompareUpperBoundDatetime2ColumnCommonOftOfCommon</label>
</div>
@Html.TextBox("upperBoundDatetime2ColumnCommonOftOfCommon", Model.Criteria.UpperBoundDatetime2ColumnCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareDatetimeColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareDatetimeColumnCommonOftOfCommon</label>
</div><input type="text" rangepickername="datefilter" value="" class="form-control" />
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareLowerBoundDatetimeColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareLowerBound_ID_CheckBox_Search_isToCompareLowerBoundDatetimeColumnCommonOftOfCommon</label>
</div>
@Html.TextBox("lowerBoundDatetimeColumnCommonOftOfCommon", Model.Criteria.LowerBoundDatetimeColumnCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareUpperBoundDatetimeColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareUpperBound_ID_CheckBox_Search_isToCompareUpperBoundDatetimeColumnCommonOftOfCommon</label>
</div>
@Html.TextBox("upperBoundDatetimeColumnCommonOftOfCommon", Model.Criteria.UpperBoundDatetimeColumnCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareBitColumnCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareBitColumnCommonOftOfCommon</label>
</div>
<div class="form-control checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.ValueToCompareBitColumnCommonOftOfCommon.Value, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.ValueToCompare_ID_CheckBox_Search_valueToCompareBitColumnCommonOftOfCommon</label>
</div>
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareCreatedDateTimeCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareCreatedDateTimeCommonOftOfCommon</label>
</div><input type="text" rangepickername="datefilter" value="" class="form-control" />
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareLowerBoundCreatedDateTimeCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareLowerBound_ID_CheckBox_Search_isToCompareLowerBoundCreatedDateTimeCommonOftOfCommon</label>
</div>
@Html.TextBox("lowerBoundCreatedDateTimeCommonOftOfCommon", Model.Criteria.LowerBoundCreatedDateTimeCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareUpperBoundCreatedDateTimeCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompareUpperBound_ID_CheckBox_Search_isToCompareUpperBoundCreatedDateTimeCommonOftOfCommon</label>
</div>
@Html.TextBox("upperBoundCreatedDateTimeCommonOftOfCommon", Model.Criteria.UpperBoundCreatedDateTimeCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareIsSystemBuiltInCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareIsSystemBuiltInCommonOftOfCommon</label>
</div>
<div class="form-control checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.ValueToCompareIsSystemBuiltInCommonOftOfCommon.Value, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.ValueToCompare_ID_CheckBox_Search_valueToCompareIsSystemBuiltInCommonOftOfCommon</label>
</div>
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareIdCommonOfOrganization_2OfCommon, new { @class="styled" })<label class="control-label">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsToCompare_ID_CheckBox_Search_isToCompareIdCommonOfOrganization_2OfCommon</label>
</div>
@Html.DropDownListFor(model => model.Criteria.ValueToCompareIdCommonOfOrganization_2OfCommon, (List<SelectListItem>)Model.SelectListOfMSBuildExtensionPack_Organization, MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____, new Dictionary<string,Object>{ { "class", "form-control" } })
</div>
                    <div class="form-group form-inline">
                        <label class="control-label">Items per page : </label>
                        @Html.DropDownListFor(model => model.QueryPagingSetting.PageSize, Model.UISharedViewModel.SelectListOfPageSize, new Dictionary<string, Object> { { "class", "form-control" }, { "onchange", "this.form.submit();" } })
                    </div>
                    <div class="form-group form-inline">
                        <label class="control-label">Sort by:</label>
                        @Html.DropDownListFor(model => model.QueryOrderBySettingCollecionInString, Model.UISharedViewModel.SelectListOfQueryOrderBySettingCollecionInString, new Dictionary<string, Object> { { "class", "form-control" }, { "onchange", "this.form.submit();" } })
                    </div>
                </div>
                <div class="panel-footer nopadding">
<div class="btn-group btn-group-justified" role="group" aria-label="...">
<div class="btn-group">
    <button class="btn btn-default" role="button" type="submit" name="SearchToolBarBottom" title="@Framework.Resx.UIStringResource.Search">
        <span class="glyphicon glyphicon-search"></span>
    </button>
</div>
<div class="btn-group">
<a href="@Url.Action(UrlStringsAlias.ActionName_Organization_AddNew, UrlStringsAlias.ControllerName_Organization)" class="btn btn-default" role="button" type="button" name="AddNewToolBarBottom" title="@Framework.Resx.UIStringResource.AddNew">
        <span class="glyphicon glyphicon-plus"></span>
    </a>
</div>
<div class="btn-group">
    <a href="location.href='@Url.Action(UrlStringsAlias.ActionName_Organization_WPCommonOfOrganization_Export, UrlStringsAlias.ControllerName_Organization, new RouteValueDictionary { { "dataServiceType", "Csv" } })'" class="btn btn-default" role="button" type="button" name="ExportToolBarBottom" title="@Framework.Resx.UIStringResource.Export">
        <span class="glyphicon glyphicon-export"></span>
    </a>
</div>
<div class="btn-group">
    <a href="location.href='@Url.Action(UrlStringsAlias.ActionName_Organization_WPCommonOfOrganization_Export, UrlStringsAlias.ControllerName_Organization, new RouteValueDictionary { { "dataServiceType", "Excel2010" } })'" class="btn btn-default" role="button" type="button" name="ExportToExcelToolBarBottom" title="@Framework.Resx.UIStringResource.ExportToExcel">
        <span class="glyphicon glyphicon-export"></span>
    </a>
</div>
<div class="btn-group">
<a href="@Url.Action(UrlStringsAlias.ActionName_Organization_Import, UrlStringsAlias.ControllerName_Organization)" class="btn btn-default" role="button" type="button" name="ImportToolBarBottom" title="@Framework.Resx.UIStringResource.Import">
        <span class="glyphicon glyphicon-import"></span>
    </a>
</div>
</div>
                </div>
            </div>
        }
 </div>
 <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9 nopadding">
        <div class="panel panel-default">
            <div class="panel-heading clearfix">
                <h3 style="display: inline;">@Html.ActionLink(MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Organization, "WPCommonOfOrganization", "Organization")</h3>
            </div>
            <div class="table-responsive">
<table id="MasterDataControl1" name="MasterDataControl1" class="table table-hover table-bordered table-striped">
<thead>
 <tr><th  style="min-width:100px" class="hidden-xs visible-sm"></th>
<th >@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Organization_2_UniqueidentifierColumn</th>
<th >@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Organization_2_UniqueIdentifier</th>
<th >@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Organization_2_Name</th>
<th  class="hidden-xs visible-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Name</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IsSystemBuiltIn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.UniqueIdentifier</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.CreatedDateTime</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.CharColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.VarcharColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.TextColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.NcharColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.NvarcharColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.NtextColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.BitColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.BinaryColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.VarbinaryColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.ImageColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.TinyintColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.SmallintColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.IntColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.BigintColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.DecimalColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.NumericColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.SmallmoneyColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.MoneyColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.FloatColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.RealColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.DatetimeColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Datetime2Column</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.SmalldatetimeColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.DateColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.TimeColumn</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.UniqueidentifierColumn</th>
<th  class="col-xs-4 col-sm-3 col-md-2 col-lg-2"></th></tr>
</thead>
<tbody>
    @if (Model != null && Model.StatusOfResult == Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
    {
        int index = 0;
        foreach (var item in Model.Result)
        {
            index++;
<tr><td  style="min-width:100px" class="hidden-xs visible-sm"></td>
<td  class="col-xs-4 col-sm-3 col-md-2 col-lg-2"><div class="btn-group btn-group-justified" role="group" aria-label="..."><div class="btn-group">
    <a href="@Url.Action(UrlStringsAlias.ActionName_Organization_WPEntityRelatedOfOrganization, UrlStringsAlias.ControllerName_Organization, new { isToCompareIdIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=false, valueToCompareIdIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = item.Id, isToCompareUniqueIdentifierIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=true, valueToCompareUniqueIdentifierIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = item.UniqueIdentifier, isToCompareUniqueidentifierColumnIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=true, valueToCompareUniqueidentifierColumnIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = item.UniqueidentifierColumn })" class="btn btn-default" role="button" type="button" name="FullDetailsToolBarRightInList" title="@Framework.Resx.UIStringResource.FullDetails">
        <span class="glyphicon glyphicon-briefcase"></span>
    </a>
    <a href="@Url.Action(UrlStringsAlias.ActionName_Organization_Edit, UrlStringsAlias.ControllerName_Organization, new { isToCompareIdIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=false, valueToCompareIdIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = item.Id, isToCompareUniqueIdentifierIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=true, valueToCompareUniqueIdentifierIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = item.UniqueIdentifier, isToCompareUniqueidentifierColumnIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=true, valueToCompareUniqueidentifierColumnIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = item.UniqueidentifierColumn })" class="btn btn-default" role="button" type="button" name="EditToolBarRightInList" title="@Framework.Resx.UIStringResource.Edit">
        <span class="glyphicon glyphicon-edit"></span>
    </a>
</div></div></td>
<td >@Html.ActionLink(item.Organization_2_Name, UrlStringsAlias.ActionName_Organization_WPEntityRelatedOfOrganization, UrlStringsAlias.ControllerName_Organization, new { isToCompareIdIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=false, valueToCompareIdIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = item.ParentId, isToCompareUniqueIdentifierIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=true, valueToCompareUniqueIdentifierIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = item.Organization_2_UniqueIdentifier, isToCompareUniqueidentifierColumnIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=true, valueToCompareUniqueidentifierColumnIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = item.Organization_2_UniqueidentifierColumn }, null)</td>
<td >@Html.DisplayFor(modelItem => item.Name)</td>
<td >@Html.DisplayFor(modelItem => item.IsSystemBuiltIn)</td>
<td >@Html.DisplayFor(modelItem => item.UniqueIdentifier)</td>
<td >@Html.DisplayFor(modelItem => item.CreatedDateTime)</td>
<td >@Html.DisplayFor(modelItem => item.CharColumn)</td>
<td >@Html.DisplayFor(modelItem => item.VarcharColumn)</td>
<td >@Html.DisplayFor(modelItem => item.TextColumn)</td>
<td >@Html.DisplayFor(modelItem => item.NcharColumn)</td>
<td >@Html.DisplayFor(modelItem => item.NvarcharColumn)</td>
<td >@Html.DisplayFor(modelItem => item.NtextColumn)</td>
<td >@Html.DisplayFor(modelItem => item.BitColumn)</td>
<td >@Html.DisplayFor(modelItem => item.BinaryColumn)</td>
<td >@Html.DisplayFor(modelItem => item.VarbinaryColumn)</td>
<td >@Html.DisplayFor(modelItem => item.ImageColumn)</td>
<td >@Html.DisplayFor(modelItem => item.TinyintColumn)</td>
<td >@Html.DisplayFor(modelItem => item.SmallintColumn)</td>
<td >@Html.DisplayFor(modelItem => item.IntColumn)</td>
<td >@Html.DisplayFor(modelItem => item.BigintColumn)</td>
<td >@Html.DisplayFor(modelItem => item.DecimalColumn)</td>
<td >@Html.DisplayFor(modelItem => item.NumericColumn)</td>
<td >@Html.DisplayFor(modelItem => item.SmallmoneyColumn)</td>
<td >@Html.DisplayFor(modelItem => item.MoneyColumn)</td>
<td >@Html.DisplayFor(modelItem => item.FloatColumn)</td>
<td >@Html.DisplayFor(modelItem => item.RealColumn)</td>
<td >@Html.DisplayFor(modelItem => item.DatetimeColumn)</td>
<td >@Html.DisplayFor(modelItem => item.Datetime2Column)</td>
<td >@Html.DisplayFor(modelItem => item.SmalldatetimeColumn)</td>
<td >@Html.DisplayFor(modelItem => item.DateColumn)</td>
<td >@Html.DisplayFor(modelItem => item.TimeColumn)</td>
<td >@Html.DisplayFor(modelItem => item.UniqueidentifierColumn)</td></tr>
        }
    }
    else
    {
<tr><td colspan="50" ><div class="text-danger">@Model.StatusMessageOfResult</div>
</td></tr>
    }
</tbody>
</table>
            </div>
            <div class="pull-right">
    @if (Model.Result != null)
    {
        var pagedResult = (PagedList.StaticPagedList<MSBuildExtensionPack.DataSourceEntities.Organization.Default>)ViewBag.StaticPagedResult;
        <text>
            @Html.PagedListPager(pagedResult, currentPage => Url.Action(UrlStringsAlias.ActionName_Organization_WPCommonOfOrganization, new { currentPage = currentPage }), PagedList.Mvc.PagedListRenderOptions.OnlyShowFivePagesAtATime)
        </text>
    }
            </div>
        </div>
 </div>
 </div>
@section Scripts {
    <script type="text/javascript">
        $(document).ready($(function() {
            $('input[name=upperBoundDateColumnCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=lowerBoundDateColumnCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            // Daterangepicker init
            $(function() {
                $('input[rangepickername="datefilter"]').daterangepicker({
                    autoUpdateInput: false,
                    locale: {
                                cancelLabel: 'Clear'
                            },
                    ranges: {
                               'Today': [moment(), moment()],
                               'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                               'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                               'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                               'This Month': [moment().startOf('month'), moment().endOf('month')],
                               'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                            }
                });
                $('input[rangepickername="datefilter"]').on('apply.daterangepicker', function(ev, picker) {
                    var filterCheckbox = $(this).siblings(".input-group-addon").children('input');
                    if (filterCheckbox.prop( "checked", false )) {
                        filterCheckbox.trigger('click');
                    }
                    $(this).val(picker.startDate.format('MM/DD/YYYY') + ' - ' + picker.endDate.format('MM/DD/YYYY'));
                    $(this).next().children("input:text").first().val(picker.startDate.format('MM/DD/YYYY'));
                    $(this).next().children("input:text").last().val(picker.endDate.format('MM/DD/YYYY'));
                });
                $('input[rangepickername="datefilter"]').on('cancel.daterangepicker', function(ev, picker) {
                    $(this).val('');
                    var filterCheckbox = $(this).siblings(".input-group-addon").children('input');
                    if (filterCheckbox.prop( "checked" )) {
                        filterCheckbox.trigger('click');
                    }
                    $(this).next().children("input:text").first().val(picker.startDate.format('MM/DD/YYYY'));
                    $(this).next().children("input:text").last().val(picker.endDate.format('MM/DD/YYYY'));
                });
                // Set daterange to reflect hidden inputs
                $('input[rangepickername="datefilter"]').each(function(){
                    var startDate = $(this).next().children("input:text").first().val()
                    var endDate = $(this).next().children("input:text").last().val()
                    if (startDate != '1/1/0001 12:00:00 AM') {
                        $(this).data('daterangepicker').setStartDate( startDate );
                    }
                    if (endDate != '1/1/0001 12:00:00 AM') {
                        $(this).data('daterangepicker').setEndDate( endDate );
                    }
                });
            });
            $('input[name=upperBoundSmalldatetimeColumnCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=lowerBoundSmalldatetimeColumnCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=upperBoundDatetime2ColumnCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=lowerBoundDatetime2ColumnCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=upperBoundDatetimeColumnCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=lowerBoundDatetimeColumnCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=upperBoundCreatedDateTimeCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=lowerBoundCreatedDateTimeCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
        }));
        $(document).ready($(function() {
            $.validator.addMethod(
                "date",
                function(value, element) {
                    var bits = value.match(/([0-9]+)/gi), str;
                    if (!bits)
                        return this.optional(element) || false;
                    str = bits[1] + '/' + bits[0] + '/' + bits[2];
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
                },
                "Please enter a date in the format dd/mm/yyyy"
            );
            $("form").validate({
                onkeyup: false,
                errorPlacement: function(error, element) {
                    if (element.attr("name").indexOf("DOB") >= 0) {
                        error.insertAfter("#DOB_Day");
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                    upperBoundDateColumnCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                    ,                    lowerBoundDateColumnCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                    ,                    upperBoundSmalldatetimeColumnCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                    ,                    lowerBoundSmalldatetimeColumnCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                    ,                    upperBoundDatetime2ColumnCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                    ,                    lowerBoundDatetime2ColumnCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                    ,                    upperBoundDatetimeColumnCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                    ,                    lowerBoundDatetimeColumnCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                    ,                    upperBoundCreatedDateTimeCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                    ,                    lowerBoundCreatedDateTimeCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    }
                },
                messages: {
                    upperBoundDateColumnCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                    ,                    lowerBoundDateColumnCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                    ,                    upperBoundSmalldatetimeColumnCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                    ,                    lowerBoundSmalldatetimeColumnCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                    ,                    upperBoundDatetime2ColumnCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                    ,                    lowerBoundDatetime2ColumnCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                    ,                    upperBoundDatetimeColumnCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                    ,                    lowerBoundDatetimeColumnCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                    ,                    upperBoundCreatedDateTimeCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                    ,                    lowerBoundCreatedDateTimeCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    }
                },
                highlight:
                    function(element) {
                        $(element).css('border', '2px solid red');
                    },
                unhighlight:
                    function(element) {
                        $(element).css('border', '1px solid rgb(170, 170, 170)');
                    },
                errorLabelContainer: "#ErrorList",
                wrapper: "li"
            });
        }));
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
        }
        var objVM = new CascadingDDLViewModel();
        ko.applyBindings(objVM);
    </script>
}
