@using UrlStringsAlias = MSBuildExtensionPack.AspNetMvc40Rasor.Helpers.UrlStrings;
@model MSBuildExtensionPack.AspNetMvc40ViewModel.OrganizationItemVM
<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h2>@Model.ContentData.Title.</h2>
                <h4>@Model.ContentData.Summary</h4>
            </div>
@if (Model.StatusOfResult != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK && Model.StatusOfResult != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.UIProcessReady)
{
            <div class="panel-body">
                <div class="text-danger">@Model.StatusMessageOfResult</div>
            </div>
}
@using (Html.BeginForm(UrlStringsAlias.ActionName_Organization_Edit, UrlStringsAlias.ControllerName_Organization, FormMethod.Post, new { @class= "form" })) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
            <div class="panel-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.Id, new { @class = "control-label" })
                        <div class="form-control">
                            @Html.DisplayFor(model => model.Item.Id)
                        </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.CreatedDateTime, new { @class = "control-label" })
                        <div class="form-control">
                            @Html.DisplayFor(model => model.Item.CreatedDateTime)
                        </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.ParentId, new { @class = "control-label" })
                        @Html.HiddenFor(model => model.Item.Organization_2_UniqueidentifierColumn)
                        @Html.HiddenFor(model => model.Item.Organization_2_UniqueIdentifier)
                        @Html.HiddenFor(model => model.Item.ParentId)
                        @Html.DropDownListFor(model => model.Item.ParentId, (List<SelectListItem>)Model.SelectListOfMSBuildExtensionPack_Organization, MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____, new Dictionary<string,Object>{ { "class", "form-control" } })
                </div>
                <div class="form-group">
                        @Html.EditorFor(model => model.Item.IsSystemBuiltIn, new { @class = "form-control" })
                </div>
                <div class="form-group">
                        @Html.EditorFor(model => model.Item.BitColumn, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.Name, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.Name, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.Name, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.UniqueIdentifier, new { @class = "control-label" })
        @Html.EditorFor(model => model.Item.UniqueIdentifier, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.UniqueIdentifier, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.CharColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.CharColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.CharColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.VarcharColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.VarcharColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.VarcharColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.TextColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.TextColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.TextColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.NcharColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.NcharColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.NcharColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.NvarcharColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.NvarcharColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.NvarcharColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.NtextColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.NtextColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.NtextColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.BinaryColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.BinaryColumn, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.VarbinaryColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.VarbinaryColumn, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.ImageColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.ImageColumn, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.TinyintColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.TinyintColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.TinyintColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.SmallintColumn, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Item.SmallintColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.SmallintColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.IntColumn, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Item.IntColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.IntColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.BigintColumn, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Item.BigintColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.BigintColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.DecimalColumn, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Item.DecimalColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.DecimalColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.NumericColumn, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Item.NumericColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.NumericColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.SmallmoneyColumn, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Item.SmallmoneyColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.SmallmoneyColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.MoneyColumn, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Item.MoneyColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.MoneyColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.FloatColumn, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Item.FloatColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.FloatColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.RealColumn, new { @class = "control-label" })
                        @Html.EditorFor(model => model.Item.RealColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.RealColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.DatetimeColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.DatetimeColumn, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Item.DatetimeColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.Datetime2Column, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.Datetime2Column, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Item.Datetime2Column, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.SmalldatetimeColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.SmalldatetimeColumn, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Item.SmalldatetimeColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.DateColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.DateColumn, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Item.DateColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.TimeColumn, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Item.TimeColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.TimeColumn, null, new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Item.UniqueidentifierColumn, new { @class = "control-label" })
        @Html.EditorFor(model => model.Item.UniqueidentifierColumn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Item.UniqueidentifierColumn, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="panel-footer nopadding">
                <div class="btn-group btn-group-justified" role="group" aria-label="...">
                    <div class="btn-group">
                        <button class="btn btn-primary" role="button" type="submit">
                            <span class="glyphicon glyphicon-ok-sign"></span>
                            <span class="submit-text hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resx.UIStringResource.Save</span>
                        </button>
                    </div>
                    <div class="btn-group">
                        <a href="@Url.Action(UrlStringsAlias.ActionName_Organization_Edit, new { isToCompareIdIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=false, valueToCompareIdIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = Model.Item.Id, isToCompareUniqueIdentifierIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=false, valueToCompareUniqueIdentifierIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = default(System.Guid), isToCompareUniqueidentifierColumnIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint=false, valueToCompareUniqueidentifierColumnIdentifierAndUniqueConstraintOftOfIdentifierAndUniqueConstraint = default(System.Guid) })" class="btn btn-default" role="button" type="button">
                            <span class="glyphicon glyphicon-refresh"></span><span class="hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resx.UIStringResource.Refresh</span>
                        </a>
                    </div>
                    <div class="btn-group">
                        <a href="@Url.Action(UrlStringsAlias.ActionName_Organization_Index)" class="btn btn-default" role="button" type="button">
                            <span class="glyphicon glyphicon-ban-circle"></span><span class="hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resx.UIStringResource.Back</span>
                        </a>
                    </div>
                </div>
            </div>
}
        </div>
    </div>
</div>
@section Scripts {
   <script type="text/javascript">
        $(document).ready($(function() {
            $('input[name="Item.DatetimeColumn"]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name="Item.Datetime2Column"]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name="Item.SmalldatetimeColumn"]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name="Item.DateColumn"]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
        }));
    </script>
}
