@using UrlStringsAlias = MSBuildExtensionPack.AspNetMvc40Rasor.Helpers.UrlStrings;
@model MSBuildExtensionPack.AspNetMvc40ViewModel.SolutionItemVM
<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h2>@Model.ContentData.Title.</h2>
                <h4>@Model.ContentData.Summary</h4>
            </div>
@if (Model.StatusOfResult != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK && Model.StatusOfResult != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.UIProcessReady)
{
            <div class="panel-body">
                <div class="text-danger">@Model.StatusMessageOfResult</div>
            </div>
}
@using (Html.BeginForm(UrlStringsAlias.ActionName_Solution_AddNew, UrlStringsAlias.ControllerName_Solution, FormMethod.Post, new { @class= "form" })) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
            <div class="panel-body">
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.Id, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.DisplayFor(model => model.Item.Id)
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.Organization_2Id, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.HiddenFor(model => model.Item.Organization_2Id)
                        @Html.DropDownListFor(model => model.Item.Organization_2Id, (List<SelectListItem>)Model.SelectListOfMSBuildExtensionPack_Organization, MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____, new Dictionary<string,Object>{ { "onchange", "FetchOrganization_1();" }, { "class", "form-control" } })
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.OrganizationId, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.HiddenFor(model => model.Item.OrganizationId)
                        @Html.DropDownListFor(model => model.Item.OrganizationId, Enumerable.Empty<SelectListItem>(), MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____, new Dictionary<string,Object>{ { "class", "form-control" }, { "data-bind", string.Format(@"options:selectListOfOrganization_1,optionsCaption:'{0}',optionsText:'name',optionsValue:'value',value:selectedOrganization_1", MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____) } })
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.ExternalParentId, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.EditorFor(model => model.Item.ExternalParentId)
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.Name, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.EditorFor(model => model.Item.Name)
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.Description, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.EditorFor(model => model.Item.Description)
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.Id, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.DisplayFor(model => model.Item.Id)
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.Organization_2Id, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.HiddenFor(model => model.Item.Organization_2Id)
                        @Html.DropDownListFor(model => model.Item.Organization_2Id, (List<SelectListItem>)Model.SelectListOfMSBuildExtensionPack_Organization, MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____, new Dictionary<string,Object>{ { "onchange", "FetchOrganization_1();" }, { "class", "form-control" } })
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.OrganizationId, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.HiddenFor(model => model.Item.OrganizationId)
                        @Html.DropDownListFor(model => model.Item.OrganizationId, Enumerable.Empty<SelectListItem>(), MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____, new Dictionary<string,Object>{ { "class", "form-control" }, { "data-bind", string.Format(@"options:selectListOfOrganization_1,optionsCaption:'{0}',optionsText:'name',optionsValue:'value',value:selectedOrganization_1", MSBuildExtensionPack.Resx.UIStringResourcePerEntityOrganization.Please_select_Organization____) } })
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.ExternalParentId, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.EditorFor(model => model.Item.ExternalParentId)
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.Name, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.EditorFor(model => model.Item.Name)
                    </div>
                </div>
                <div class="form-group" >
                        @Html.LabelFor(model => model.Item.Description, new { @class = "control-label" })
                    <div class="form-control">
                        @Html.EditorFor(model => model.Item.Description)
                    </div>
                </div>
            </div>
            <div class="panel-footer nopadding">
                <div class="btn-group btn-group-justified" role="group" aria-label="...">
                    <div class="btn-group">
                        <button class="btn btn-primary" role="button" type="submit">
                            <span class="glyphicon glyphicon-ok-sign"></span>
                            <span class="submit-text hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resx.UIStringResource.Save</span>
                        </button>
                    </div>
                    <div class="btn-group">
                        <a href="@Url.Action(UrlStringsAlias.ActionName_Solution_AddNew)" class="btn btn-default" role="button" type="button">
                            <span class="glyphicon glyphicon-refresh"></span><span class="hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resx.UIStringResource.Refresh</span>
                        </a>
                    </div>
                    <div class="btn-group">
                        <a href="@Url.Action(UrlStringsAlias.ActionName_Solution_Index)" class="btn btn-default" role="button" type="button">
                            <span class="glyphicon glyphicon-ban-circle"></span><span class="hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resx.UIStringResource.Back</span>
                        </a>
                    </div>
                </div>
            </div>
}
        </div>
    </div>
</div>
@section Scripts {
    <script type="text/javascript">
        $(document).ready($(function() {
        }));
        $(document).ready($(function() {
            $.validator.addMethod(
                "date",
                function(value, element) {
                    var bits = value.match(/([0-9]+)/gi), str;
                    if (!bits)
                        return this.optional(element) || false;
                    str = bits[1] + '/' + bits[0] + '/' + bits[2];
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
                },
                "Please enter a date in the format dd/mm/yyyy"
            );
            $("form").validate({
                onkeyup: false,
                errorPlacement: function(error, element) {
                    if (element.attr("name").indexOf("DOB") >= 0) {
                        error.insertAfter("#DOB_Day");
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                },
                messages: {
                },
                highlight:
                    function(element) {
                        $(element).css('border', '2px solid red');
                    },
                unhighlight:
                    function(element) {
                        $(element).css('border', '1px solid rgb(170, 170, 170)');
                    },
                errorLabelContainer: "#ErrorList",
                wrapper: "li"
            });
        }));
        function FetchOrganization_1() {
var selectedvalueToCompareIdByFKOnlyOfOrganization_2OfByFKOnly = $("#Item_Organization_2Id").val();
            var url = "/api/OrganizationApi/GetCollectionOfNameValuePairOfByFKOnly";
            var params = BuildCriteriaForFetchOrganization_1(selectedvalueToCompareIdByFKOnlyOfOrganization_2OfByFKOnly);
            if(selectedvalueToCompareIdByFKOnlyOfOrganization_2OfByFKOnly)
            {
                $.getJSON(url, params, function (data) {
                    objVM.selectListOfOrganizationId(data);
                    objVM.selectedOrganizationId(@Model.Item.OrganizationId);
                });
            }
        }
        function BuildCriteriaForFetchOrganization_1(selectedvalueToCompareIdByFKOnlyOfOrganization_2OfByFKOnly) {
            var params = {
                isToCompareIdByFKOnlyOfOrganization_2OfByFKOnly: true,
                valueToCompareIdByFKOnlyOfOrganization_2OfByFKOnly: selectedvalueToCompareIdByFKOnlyOfOrganization_2OfByFKOnly,
                currentIndex: -1,
                pageSize: -1,
                queryOrderByExpression: null
            };
            return params;
        }
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
            self.selectListOfOrganizationId = ko.observableArray([]);
            self.selectedOrganizationId = ko.observable();
        }
        var objVM = new CascadingDDLViewModel();
        ko.applyBindings(objVM);
$("#Item_Organization_2Id").change();
    </script>
}
