#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test2.dbml
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AdventureWorks2014")]
	public partial class HumanResourcesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertStateProvince(StateProvince instance);
    partial void UpdateStateProvince(StateProvince instance);
    partial void DeleteStateProvince(StateProvince instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeDepartmentHistory(EmployeeDepartmentHistory instance);
    partial void UpdateEmployeeDepartmentHistory(EmployeeDepartmentHistory instance);
    partial void DeleteEmployeeDepartmentHistory(EmployeeDepartmentHistory instance);
    partial void InsertEmployeePayHistory(EmployeePayHistory instance);
    partial void UpdateEmployeePayHistory(EmployeePayHistory instance);
    partial void DeleteEmployeePayHistory(EmployeePayHistory instance);
    partial void InsertJobCandidate(JobCandidate instance);
    partial void UpdateJobCandidate(JobCandidate instance);
    partial void DeleteJobCandidate(JobCandidate instance);
    partial void InsertShift(Shift instance);
    partial void UpdateShift(Shift instance);
    partial void DeleteShift(Shift instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertBusinessEntity(BusinessEntity instance);
    partial void UpdateBusinessEntity(BusinessEntity instance);
    partial void DeleteBusinessEntity(BusinessEntity instance);
    partial void InsertBusinessEntityAddress(BusinessEntityAddress instance);
    partial void UpdateBusinessEntityAddress(BusinessEntityAddress instance);
    partial void DeleteBusinessEntityAddress(BusinessEntityAddress instance);
    partial void InsertBusinessEntityContact(BusinessEntityContact instance);
    partial void UpdateBusinessEntityContact(BusinessEntityContact instance);
    partial void DeleteBusinessEntityContact(BusinessEntityContact instance);
    partial void InsertContactType(ContactType instance);
    partial void UpdateContactType(ContactType instance);
    partial void DeleteContactType(ContactType instance);
    partial void InsertCountryRegion(CountryRegion instance);
    partial void UpdateCountryRegion(CountryRegion instance);
    partial void DeleteCountryRegion(CountryRegion instance);
    partial void InsertEmailAddress(EmailAddress instance);
    partial void UpdateEmailAddress(EmailAddress instance);
    partial void DeleteEmailAddress(EmailAddress instance);
    partial void InsertPassword(Password instance);
    partial void UpdatePassword(Password instance);
    partial void DeletePassword(Password instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonPhone(PersonPhone instance);
    partial void UpdatePersonPhone(PersonPhone instance);
    partial void DeletePersonPhone(PersonPhone instance);
    partial void InsertPhoneNumberType(PhoneNumberType instance);
    partial void UpdatePhoneNumberType(PhoneNumberType instance);
    partial void DeletePhoneNumberType(PhoneNumberType instance);
    #endregion
		
		public HumanResourcesDataContext() : 
				base(global::Test2.Properties.Settings.Default.AdventureWorks2014ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HumanResourcesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HumanResourcesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HumanResourcesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HumanResourcesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<StateProvince> StateProvinces
		{
			get
			{
				return this.GetTable<StateProvince>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeDepartmentHistory> EmployeeDepartmentHistories
		{
			get
			{
				return this.GetTable<EmployeeDepartmentHistory>();
			}
		}
		
		public System.Data.Linq.Table<EmployeePayHistory> EmployeePayHistories
		{
			get
			{
				return this.GetTable<EmployeePayHistory>();
			}
		}
		
		public System.Data.Linq.Table<JobCandidate> JobCandidates
		{
			get
			{
				return this.GetTable<JobCandidate>();
			}
		}
		
		public System.Data.Linq.Table<Shift> Shifts
		{
			get
			{
				return this.GetTable<Shift>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<BusinessEntity> BusinessEntities
		{
			get
			{
				return this.GetTable<BusinessEntity>();
			}
		}
		
		public System.Data.Linq.Table<BusinessEntityAddress> BusinessEntityAddresses
		{
			get
			{
				return this.GetTable<BusinessEntityAddress>();
			}
		}
		
		public System.Data.Linq.Table<BusinessEntityContact> BusinessEntityContacts
		{
			get
			{
				return this.GetTable<BusinessEntityContact>();
			}
		}
		
		public System.Data.Linq.Table<ContactType> ContactTypes
		{
			get
			{
				return this.GetTable<ContactType>();
			}
		}
		
		public System.Data.Linq.Table<CountryRegion> CountryRegions
		{
			get
			{
				return this.GetTable<CountryRegion>();
			}
		}
		
		public System.Data.Linq.Table<EmailAddress> EmailAddresses
		{
			get
			{
				return this.GetTable<EmailAddress>();
			}
		}
		
		public System.Data.Linq.Table<Password> Passwords
		{
			get
			{
				return this.GetTable<Password>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonPhone> PersonPhones
		{
			get
			{
				return this.GetTable<PersonPhone>();
			}
		}
		
		public System.Data.Linq.Table<PhoneNumberType> PhoneNumberTypes
		{
			get
			{
				return this.GetTable<PhoneNumberType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DepartmentID;
		
		private string _Name;
		
		private string _GroupName;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<EmployeeDepartmentHistory> _EmployeeDepartmentHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(short value);
    partial void OnDepartmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Department()
		{
			this._EmployeeDepartmentHistories = new EntitySet<EmployeeDepartmentHistory>(new Action<EmployeeDepartmentHistory>(this.attach_EmployeeDepartmentHistories), new Action<EmployeeDepartmentHistory>(this.detach_EmployeeDepartmentHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_EmployeeDepartmentHistory", Storage="_EmployeeDepartmentHistories", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<EmployeeDepartmentHistory> EmployeeDepartmentHistories
		{
			get
			{
				return this._EmployeeDepartmentHistories;
			}
			set
			{
				this._EmployeeDepartmentHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.StateProvince")]
	public partial class StateProvince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateProvinceID;
		
		private string _StateProvinceCode;
		
		private string _CountryRegionCode;
		
		private bool _IsOnlyStateProvinceFlag;
		
		private string _Name;
		
		private int _TerritoryID;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<CountryRegion> _CountryRegion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateProvinceIDChanging(int value);
    partial void OnStateProvinceIDChanged();
    partial void OnStateProvinceCodeChanging(string value);
    partial void OnStateProvinceCodeChanged();
    partial void OnCountryRegionCodeChanging(string value);
    partial void OnCountryRegionCodeChanged();
    partial void OnIsOnlyStateProvinceFlagChanging(bool value);
    partial void OnIsOnlyStateProvinceFlagChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTerritoryIDChanging(int value);
    partial void OnTerritoryIDChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public StateProvince()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._CountryRegion = default(EntityRef<CountryRegion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateProvinceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateProvinceID
		{
			get
			{
				return this._StateProvinceID;
			}
			set
			{
				if ((this._StateProvinceID != value))
				{
					this.OnStateProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._StateProvinceID = value;
					this.SendPropertyChanged("StateProvinceID");
					this.OnStateProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateProvinceCode", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string StateProvinceCode
		{
			get
			{
				return this._StateProvinceCode;
			}
			set
			{
				if ((this._StateProvinceCode != value))
				{
					this.OnStateProvinceCodeChanging(value);
					this.SendPropertyChanging();
					this._StateProvinceCode = value;
					this.SendPropertyChanged("StateProvinceCode");
					this.OnStateProvinceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryRegionCode", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string CountryRegionCode
		{
			get
			{
				return this._CountryRegionCode;
			}
			set
			{
				if ((this._CountryRegionCode != value))
				{
					if (this._CountryRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryRegionCode = value;
					this.SendPropertyChanged("CountryRegionCode");
					this.OnCountryRegionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnlyStateProvinceFlag", DbType="Bit NOT NULL")]
		public bool IsOnlyStateProvinceFlag
		{
			get
			{
				return this._IsOnlyStateProvinceFlag;
			}
			set
			{
				if ((this._IsOnlyStateProvinceFlag != value))
				{
					this.OnIsOnlyStateProvinceFlagChanging(value);
					this.SendPropertyChanging();
					this._IsOnlyStateProvinceFlag = value;
					this.SendPropertyChanged("IsOnlyStateProvinceFlag");
					this.OnIsOnlyStateProvinceFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TerritoryID", DbType="Int NOT NULL")]
		public int TerritoryID
		{
			get
			{
				return this._TerritoryID;
			}
			set
			{
				if ((this._TerritoryID != value))
				{
					this.OnTerritoryIDChanging(value);
					this.SendPropertyChanging();
					this._TerritoryID = value;
					this.SendPropertyChanged("TerritoryID");
					this.OnTerritoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateProvince_Address", Storage="_Addresses", ThisKey="StateProvinceID", OtherKey="StateProvinceID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRegion_StateProvince", Storage="_CountryRegion", ThisKey="CountryRegionCode", OtherKey="CountryRegionCode", IsForeignKey=true)]
		public CountryRegion CountryRegion
		{
			get
			{
				return this._CountryRegion.Entity;
			}
			set
			{
				CountryRegion previousValue = this._CountryRegion.Entity;
				if (((previousValue != value) 
							|| (this._CountryRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryRegion.Entity = null;
						previousValue.StateProvinces.Remove(this);
					}
					this._CountryRegion.Entity = value;
					if ((value != null))
					{
						value.StateProvinces.Add(this);
						this._CountryRegionCode = value.CountryRegionCode;
					}
					else
					{
						this._CountryRegionCode = default(string);
					}
					this.SendPropertyChanged("CountryRegion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.StateProvince = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.StateProvince = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private string _NationalIDNumber;
		
		private string _LoginID;
		
		private string _JobTitle;
		
		private System.DateTime _BirthDate;
		
		private char _MaritalStatus;
		
		private char _Gender;
		
		private System.DateTime _HireDate;
		
		private bool _SalariedFlag;
		
		private short _VacationHours;
		
		private short _SickLeaveHours;
		
		private bool _CurrentFlag;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<EmployeeDepartmentHistory> _EmployeeDepartmentHistories;
		
		private EntitySet<EmployeePayHistory> _EmployeePayHistories;
		
		private EntitySet<JobCandidate> _JobCandidates;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnNationalIDNumberChanging(string value);
    partial void OnNationalIDNumberChanged();
    partial void OnLoginIDChanging(string value);
    partial void OnLoginIDChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnMaritalStatusChanging(char value);
    partial void OnMaritalStatusChanged();
    partial void OnGenderChanging(char value);
    partial void OnGenderChanged();
    partial void OnHireDateChanging(System.DateTime value);
    partial void OnHireDateChanged();
    partial void OnSalariedFlagChanging(bool value);
    partial void OnSalariedFlagChanged();
    partial void OnVacationHoursChanging(short value);
    partial void OnVacationHoursChanged();
    partial void OnSickLeaveHoursChanging(short value);
    partial void OnSickLeaveHoursChanged();
    partial void OnCurrentFlagChanging(bool value);
    partial void OnCurrentFlagChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Employee()
		{
			this._EmployeeDepartmentHistories = new EntitySet<EmployeeDepartmentHistory>(new Action<EmployeeDepartmentHistory>(this.attach_EmployeeDepartmentHistories), new Action<EmployeeDepartmentHistory>(this.detach_EmployeeDepartmentHistories));
			this._EmployeePayHistories = new EntitySet<EmployeePayHistory>(new Action<EmployeePayHistory>(this.attach_EmployeePayHistories), new Action<EmployeePayHistory>(this.detach_EmployeePayHistories));
			this._JobCandidates = new EntitySet<JobCandidate>(new Action<JobCandidate>(this.attach_JobCandidates), new Action<JobCandidate>(this.detach_JobCandidates));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalIDNumber", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string NationalIDNumber
		{
			get
			{
				return this._NationalIDNumber;
			}
			set
			{
				if ((this._NationalIDNumber != value))
				{
					this.OnNationalIDNumberChanging(value);
					this.SendPropertyChanging();
					this._NationalIDNumber = value;
					this.SendPropertyChanged("NationalIDNumber");
					this.OnNationalIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginID", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoginID
		{
			get
			{
				return this._LoginID;
			}
			set
			{
				if ((this._LoginID != value))
				{
					this.OnLoginIDChanging(value);
					this.SendPropertyChanging();
					this._LoginID = value;
					this.SendPropertyChanged("LoginID");
					this.OnLoginIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatus", DbType="NChar(1) NOT NULL")]
		public char MaritalStatus
		{
			get
			{
				return this._MaritalStatus;
			}
			set
			{
				if ((this._MaritalStatus != value))
				{
					this.OnMaritalStatusChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatus = value;
					this.SendPropertyChanged("MaritalStatus");
					this.OnMaritalStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(1) NOT NULL")]
		public char Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HireDate", DbType="Date NOT NULL")]
		public System.DateTime HireDate
		{
			get
			{
				return this._HireDate;
			}
			set
			{
				if ((this._HireDate != value))
				{
					this.OnHireDateChanging(value);
					this.SendPropertyChanging();
					this._HireDate = value;
					this.SendPropertyChanged("HireDate");
					this.OnHireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalariedFlag", DbType="Bit NOT NULL")]
		public bool SalariedFlag
		{
			get
			{
				return this._SalariedFlag;
			}
			set
			{
				if ((this._SalariedFlag != value))
				{
					this.OnSalariedFlagChanging(value);
					this.SendPropertyChanging();
					this._SalariedFlag = value;
					this.SendPropertyChanged("SalariedFlag");
					this.OnSalariedFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VacationHours", DbType="SmallInt NOT NULL")]
		public short VacationHours
		{
			get
			{
				return this._VacationHours;
			}
			set
			{
				if ((this._VacationHours != value))
				{
					this.OnVacationHoursChanging(value);
					this.SendPropertyChanging();
					this._VacationHours = value;
					this.SendPropertyChanged("VacationHours");
					this.OnVacationHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SickLeaveHours", DbType="SmallInt NOT NULL")]
		public short SickLeaveHours
		{
			get
			{
				return this._SickLeaveHours;
			}
			set
			{
				if ((this._SickLeaveHours != value))
				{
					this.OnSickLeaveHoursChanging(value);
					this.SendPropertyChanging();
					this._SickLeaveHours = value;
					this.SendPropertyChanged("SickLeaveHours");
					this.OnSickLeaveHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentFlag", DbType="Bit NOT NULL")]
		public bool CurrentFlag
		{
			get
			{
				return this._CurrentFlag;
			}
			set
			{
				if ((this._CurrentFlag != value))
				{
					this.OnCurrentFlagChanging(value);
					this.SendPropertyChanging();
					this._CurrentFlag = value;
					this.SendPropertyChanged("CurrentFlag");
					this.OnCurrentFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeDepartmentHistory", Storage="_EmployeeDepartmentHistories", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID")]
		public EntitySet<EmployeeDepartmentHistory> EmployeeDepartmentHistories
		{
			get
			{
				return this._EmployeeDepartmentHistories;
			}
			set
			{
				this._EmployeeDepartmentHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeePayHistory", Storage="_EmployeePayHistories", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID")]
		public EntitySet<EmployeePayHistory> EmployeePayHistories
		{
			get
			{
				return this._EmployeePayHistories;
			}
			set
			{
				this._EmployeePayHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_JobCandidate", Storage="_JobCandidates", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID")]
		public EntitySet<JobCandidate> JobCandidates
		{
			get
			{
				return this._JobCandidates;
			}
			set
			{
				this._JobCandidates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Employee", Storage="_Person", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Employee = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeePayHistories(EmployeePayHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeePayHistories(EmployeePayHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.EmployeeDepartmentHistory")]
	public partial class EmployeeDepartmentHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private short _DepartmentID;
		
		private byte _ShiftID;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Shift> _Shift;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnDepartmentIDChanging(short value);
    partial void OnDepartmentIDChanged();
    partial void OnShiftIDChanging(byte value);
    partial void OnShiftIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public EmployeeDepartmentHistory()
		{
			this._Department = default(EntityRef<Department>);
			this._Employee = default(EntityRef<Employee>);
			this._Shift = default(EntityRef<Shift>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ShiftID
		{
			get
			{
				return this._ShiftID;
			}
			set
			{
				if ((this._ShiftID != value))
				{
					if (this._Shift.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShiftIDChanging(value);
					this.SendPropertyChanging();
					this._ShiftID = value;
					this.SendPropertyChanged("ShiftID");
					this.OnShiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_EmployeeDepartmentHistory", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.EmployeeDepartmentHistories.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.EmployeeDepartmentHistories.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(short);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeDepartmentHistory", Storage="_Employee", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeDepartmentHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeDepartmentHistories.Add(this);
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shift_EmployeeDepartmentHistory", Storage="_Shift", ThisKey="ShiftID", OtherKey="ShiftID", IsForeignKey=true)]
		public Shift Shift
		{
			get
			{
				return this._Shift.Entity;
			}
			set
			{
				Shift previousValue = this._Shift.Entity;
				if (((previousValue != value) 
							|| (this._Shift.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shift.Entity = null;
						previousValue.EmployeeDepartmentHistories.Remove(this);
					}
					this._Shift.Entity = value;
					if ((value != null))
					{
						value.EmployeeDepartmentHistories.Add(this);
						this._ShiftID = value.ShiftID;
					}
					else
					{
						this._ShiftID = default(byte);
					}
					this.SendPropertyChanged("Shift");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.EmployeePayHistory")]
	public partial class EmployeePayHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private System.DateTime _RateChangeDate;
		
		private decimal _Rate;
		
		private byte _PayFrequency;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnRateChangeDateChanging(System.DateTime value);
    partial void OnRateChangeDateChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    partial void OnPayFrequencyChanging(byte value);
    partial void OnPayFrequencyChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public EmployeePayHistory()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateChangeDate", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime RateChangeDate
		{
			get
			{
				return this._RateChangeDate;
			}
			set
			{
				if ((this._RateChangeDate != value))
				{
					this.OnRateChangeDateChanging(value);
					this.SendPropertyChanging();
					this._RateChangeDate = value;
					this.SendPropertyChanged("RateChangeDate");
					this.OnRateChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Money NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayFrequency", DbType="TinyInt NOT NULL")]
		public byte PayFrequency
		{
			get
			{
				return this._PayFrequency;
			}
			set
			{
				if ((this._PayFrequency != value))
				{
					this.OnPayFrequencyChanging(value);
					this.SendPropertyChanging();
					this._PayFrequency = value;
					this.SendPropertyChanged("PayFrequency");
					this.OnPayFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeePayHistory", Storage="_Employee", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeePayHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeePayHistories.Add(this);
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.JobCandidate")]
	public partial class JobCandidate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobCandidateID;
		
		private System.Nullable<int> _BusinessEntityID;
		
		private System.Xml.Linq.XElement _Resume;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobCandidateIDChanging(int value);
    partial void OnJobCandidateIDChanged();
    partial void OnBusinessEntityIDChanging(System.Nullable<int> value);
    partial void OnBusinessEntityIDChanged();
    partial void OnResumeChanging(System.Xml.Linq.XElement value);
    partial void OnResumeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public JobCandidate()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobCandidateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobCandidateID
		{
			get
			{
				return this._JobCandidateID;
			}
			set
			{
				if ((this._JobCandidateID != value))
				{
					this.OnJobCandidateIDChanging(value);
					this.SendPropertyChanging();
					this._JobCandidateID = value;
					this.SendPropertyChanged("JobCandidateID");
					this.OnJobCandidateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int")]
		public System.Nullable<int> BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resume", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Resume
		{
			get
			{
				return this._Resume;
			}
			set
			{
				if ((this._Resume != value))
				{
					this.OnResumeChanging(value);
					this.SendPropertyChanging();
					this._Resume = value;
					this.SendPropertyChanged("Resume");
					this.OnResumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_JobCandidate", Storage="_Employee", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.JobCandidates.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.JobCandidates.Add(this);
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Shift")]
	public partial class Shift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ShiftID;
		
		private string _Name;
		
		private System.TimeSpan _StartTime;
		
		private System.TimeSpan _EndTime;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<EmployeeDepartmentHistory> _EmployeeDepartmentHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShiftIDChanging(byte value);
    partial void OnShiftIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartTimeChanging(System.TimeSpan value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.TimeSpan value);
    partial void OnEndTimeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Shift()
		{
			this._EmployeeDepartmentHistories = new EntitySet<EmployeeDepartmentHistory>(new Action<EmployeeDepartmentHistory>(this.attach_EmployeeDepartmentHistories), new Action<EmployeeDepartmentHistory>(this.detach_EmployeeDepartmentHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte ShiftID
		{
			get
			{
				return this._ShiftID;
			}
			set
			{
				if ((this._ShiftID != value))
				{
					this.OnShiftIDChanging(value);
					this.SendPropertyChanging();
					this._ShiftID = value;
					this.SendPropertyChanged("ShiftID");
					this.OnShiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time NOT NULL")]
		public System.TimeSpan StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time NOT NULL")]
		public System.TimeSpan EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shift_EmployeeDepartmentHistory", Storage="_EmployeeDepartmentHistories", ThisKey="ShiftID", OtherKey="ShiftID")]
		public EntitySet<EmployeeDepartmentHistory> EmployeeDepartmentHistories
		{
			get
			{
				return this._EmployeeDepartmentHistories;
			}
			set
			{
				this._EmployeeDepartmentHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.Shift = this;
		}
		
		private void detach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.Shift = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private string _City;
		
		private int _StateProvinceID;
		
		private string _PostalCode;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<BusinessEntityAddress> _BusinessEntityAddresses;
		
		private EntityRef<StateProvince> _StateProvince;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateProvinceIDChanging(int value);
    partial void OnStateProvinceIDChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Address()
		{
			this._BusinessEntityAddresses = new EntitySet<BusinessEntityAddress>(new Action<BusinessEntityAddress>(this.attach_BusinessEntityAddresses), new Action<BusinessEntityAddress>(this.detach_BusinessEntityAddresses));
			this._StateProvince = default(EntityRef<StateProvince>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine1", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine2", DbType="NVarChar(60)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateProvinceID", DbType="Int NOT NULL")]
		public int StateProvinceID
		{
			get
			{
				return this._StateProvinceID;
			}
			set
			{
				if ((this._StateProvinceID != value))
				{
					if (this._StateProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._StateProvinceID = value;
					this.SendPropertyChanged("StateProvinceID");
					this.OnStateProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_BusinessEntityAddress", Storage="_BusinessEntityAddresses", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<BusinessEntityAddress> BusinessEntityAddresses
		{
			get
			{
				return this._BusinessEntityAddresses;
			}
			set
			{
				this._BusinessEntityAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateProvince_Address", Storage="_StateProvince", ThisKey="StateProvinceID", OtherKey="StateProvinceID", IsForeignKey=true)]
		public StateProvince StateProvince
		{
			get
			{
				return this._StateProvince.Entity;
			}
			set
			{
				StateProvince previousValue = this._StateProvince.Entity;
				if (((previousValue != value) 
							|| (this._StateProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateProvince.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._StateProvince.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._StateProvinceID = value.StateProvinceID;
					}
					else
					{
						this._StateProvinceID = default(int);
					}
					this.SendPropertyChanged("StateProvince");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessEntityAddresses(BusinessEntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_BusinessEntityAddresses(BusinessEntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.AddressType")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressTypeID;
		
		private string _Name;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<BusinessEntityAddress> _BusinessEntityAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressTypeIDChanging(int value);
    partial void OnAddressTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public AddressType()
		{
			this._BusinessEntityAddresses = new EntitySet<BusinessEntityAddress>(new Action<BusinessEntityAddress>(this.attach_BusinessEntityAddresses), new Action<BusinessEntityAddress>(this.detach_BusinessEntityAddresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressType_BusinessEntityAddress", Storage="_BusinessEntityAddresses", ThisKey="AddressTypeID", OtherKey="AddressTypeID")]
		public EntitySet<BusinessEntityAddress> BusinessEntityAddresses
		{
			get
			{
				return this._BusinessEntityAddresses;
			}
			set
			{
				this._BusinessEntityAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessEntityAddresses(BusinessEntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = this;
		}
		
		private void detach_BusinessEntityAddresses(BusinessEntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.BusinessEntity")]
	public partial class BusinessEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<BusinessEntityAddress> _BusinessEntityAddresses;
		
		private EntitySet<BusinessEntityContact> _BusinessEntityContacts;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public BusinessEntity()
		{
			this._BusinessEntityAddresses = new EntitySet<BusinessEntityAddress>(new Action<BusinessEntityAddress>(this.attach_BusinessEntityAddresses), new Action<BusinessEntityAddress>(this.detach_BusinessEntityAddresses));
			this._BusinessEntityContacts = new EntitySet<BusinessEntityContact>(new Action<BusinessEntityContact>(this.attach_BusinessEntityContacts), new Action<BusinessEntityContact>(this.detach_BusinessEntityContacts));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessEntity_BusinessEntityAddress", Storage="_BusinessEntityAddresses", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID")]
		public EntitySet<BusinessEntityAddress> BusinessEntityAddresses
		{
			get
			{
				return this._BusinessEntityAddresses;
			}
			set
			{
				this._BusinessEntityAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessEntity_BusinessEntityContact", Storage="_BusinessEntityContacts", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID")]
		public EntitySet<BusinessEntityContact> BusinessEntityContacts
		{
			get
			{
				return this._BusinessEntityContacts;
			}
			set
			{
				this._BusinessEntityContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessEntity_Person", Storage="_Person", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsUnique=true, IsForeignKey=false)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.BusinessEntity = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.BusinessEntity = this;
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessEntityAddresses(BusinessEntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.BusinessEntity = this;
		}
		
		private void detach_BusinessEntityAddresses(BusinessEntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.BusinessEntity = null;
		}
		
		private void attach_BusinessEntityContacts(BusinessEntityContact entity)
		{
			this.SendPropertyChanging();
			entity.BusinessEntity = this;
		}
		
		private void detach_BusinessEntityContacts(BusinessEntityContact entity)
		{
			this.SendPropertyChanging();
			entity.BusinessEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.BusinessEntityAddress")]
	public partial class BusinessEntityAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private int _AddressID;
		
		private int _AddressTypeID;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<AddressType> _AddressType;
		
		private EntityRef<BusinessEntity> _BusinessEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnAddressTypeIDChanging(int value);
    partial void OnAddressTypeIDChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public BusinessEntityAddress()
		{
			this._Address = default(EntityRef<Address>);
			this._AddressType = default(EntityRef<AddressType>);
			this._BusinessEntity = default(EntityRef<BusinessEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._BusinessEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					if (this._AddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_BusinessEntityAddress", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.BusinessEntityAddresses.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.BusinessEntityAddresses.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressType_BusinessEntityAddress", Storage="_AddressType", ThisKey="AddressTypeID", OtherKey="AddressTypeID", IsForeignKey=true)]
		public AddressType AddressType
		{
			get
			{
				return this._AddressType.Entity;
			}
			set
			{
				AddressType previousValue = this._AddressType.Entity;
				if (((previousValue != value) 
							|| (this._AddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressType.Entity = null;
						previousValue.BusinessEntityAddresses.Remove(this);
					}
					this._AddressType.Entity = value;
					if ((value != null))
					{
						value.BusinessEntityAddresses.Add(this);
						this._AddressTypeID = value.AddressTypeID;
					}
					else
					{
						this._AddressTypeID = default(int);
					}
					this.SendPropertyChanged("AddressType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessEntity_BusinessEntityAddress", Storage="_BusinessEntity", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public BusinessEntity BusinessEntity
		{
			get
			{
				return this._BusinessEntity.Entity;
			}
			set
			{
				BusinessEntity previousValue = this._BusinessEntity.Entity;
				if (((previousValue != value) 
							|| (this._BusinessEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessEntity.Entity = null;
						previousValue.BusinessEntityAddresses.Remove(this);
					}
					this._BusinessEntity.Entity = value;
					if ((value != null))
					{
						value.BusinessEntityAddresses.Add(this);
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(int);
					}
					this.SendPropertyChanged("BusinessEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.BusinessEntityContact")]
	public partial class BusinessEntityContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private int _PersonID;
		
		private int _ContactTypeID;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<BusinessEntity> _BusinessEntity;
		
		private EntityRef<ContactType> _ContactType;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnContactTypeIDChanging(int value);
    partial void OnContactTypeIDChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public BusinessEntityContact()
		{
			this._BusinessEntity = default(EntityRef<BusinessEntity>);
			this._ContactType = default(EntityRef<ContactType>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._BusinessEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContactTypeID
		{
			get
			{
				return this._ContactTypeID;
			}
			set
			{
				if ((this._ContactTypeID != value))
				{
					if (this._ContactType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeID = value;
					this.SendPropertyChanged("ContactTypeID");
					this.OnContactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessEntity_BusinessEntityContact", Storage="_BusinessEntity", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public BusinessEntity BusinessEntity
		{
			get
			{
				return this._BusinessEntity.Entity;
			}
			set
			{
				BusinessEntity previousValue = this._BusinessEntity.Entity;
				if (((previousValue != value) 
							|| (this._BusinessEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessEntity.Entity = null;
						previousValue.BusinessEntityContacts.Remove(this);
					}
					this._BusinessEntity.Entity = value;
					if ((value != null))
					{
						value.BusinessEntityContacts.Add(this);
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(int);
					}
					this.SendPropertyChanged("BusinessEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactType_BusinessEntityContact", Storage="_ContactType", ThisKey="ContactTypeID", OtherKey="ContactTypeID", IsForeignKey=true)]
		public ContactType ContactType
		{
			get
			{
				return this._ContactType.Entity;
			}
			set
			{
				ContactType previousValue = this._ContactType.Entity;
				if (((previousValue != value) 
							|| (this._ContactType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactType.Entity = null;
						previousValue.BusinessEntityContacts.Remove(this);
					}
					this._ContactType.Entity = value;
					if ((value != null))
					{
						value.BusinessEntityContacts.Add(this);
						this._ContactTypeID = value.ContactTypeID;
					}
					else
					{
						this._ContactTypeID = default(int);
					}
					this.SendPropertyChanged("ContactType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_BusinessEntityContact", Storage="_Person", ThisKey="PersonID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.BusinessEntityContacts.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.BusinessEntityContacts.Add(this);
						this._PersonID = value.BusinessEntityID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.ContactType")]
	public partial class ContactType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactTypeID;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<BusinessEntityContact> _BusinessEntityContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactTypeIDChanging(int value);
    partial void OnContactTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public ContactType()
		{
			this._BusinessEntityContacts = new EntitySet<BusinessEntityContact>(new Action<BusinessEntityContact>(this.attach_BusinessEntityContacts), new Action<BusinessEntityContact>(this.detach_BusinessEntityContacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactTypeID
		{
			get
			{
				return this._ContactTypeID;
			}
			set
			{
				if ((this._ContactTypeID != value))
				{
					this.OnContactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeID = value;
					this.SendPropertyChanged("ContactTypeID");
					this.OnContactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactType_BusinessEntityContact", Storage="_BusinessEntityContacts", ThisKey="ContactTypeID", OtherKey="ContactTypeID")]
		public EntitySet<BusinessEntityContact> BusinessEntityContacts
		{
			get
			{
				return this._BusinessEntityContacts;
			}
			set
			{
				this._BusinessEntityContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessEntityContacts(BusinessEntityContact entity)
		{
			this.SendPropertyChanging();
			entity.ContactType = this;
		}
		
		private void detach_BusinessEntityContacts(BusinessEntityContact entity)
		{
			this.SendPropertyChanging();
			entity.ContactType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.CountryRegion")]
	public partial class CountryRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryRegionCode;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<StateProvince> _StateProvinces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryRegionCodeChanging(string value);
    partial void OnCountryRegionCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CountryRegion()
		{
			this._StateProvinces = new EntitySet<StateProvince>(new Action<StateProvince>(this.attach_StateProvinces), new Action<StateProvince>(this.detach_StateProvinces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryRegionCode", DbType="NVarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryRegionCode
		{
			get
			{
				return this._CountryRegionCode;
			}
			set
			{
				if ((this._CountryRegionCode != value))
				{
					this.OnCountryRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryRegionCode = value;
					this.SendPropertyChanged("CountryRegionCode");
					this.OnCountryRegionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRegion_StateProvince", Storage="_StateProvinces", ThisKey="CountryRegionCode", OtherKey="CountryRegionCode")]
		public EntitySet<StateProvince> StateProvinces
		{
			get
			{
				return this._StateProvinces;
			}
			set
			{
				this._StateProvinces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StateProvinces(StateProvince entity)
		{
			this.SendPropertyChanging();
			entity.CountryRegion = this;
		}
		
		private void detach_StateProvinces(StateProvince entity)
		{
			this.SendPropertyChanging();
			entity.CountryRegion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.EmailAddress")]
	public partial class EmailAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private int _EmailAddressID;
		
		private string _EmailAddress1;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnEmailAddressIDChanging(int value);
    partial void OnEmailAddressIDChanged();
    partial void OnEmailAddress1Changing(string value);
    partial void OnEmailAddress1Changed();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public EmailAddress()
		{
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmailAddressID
		{
			get
			{
				return this._EmailAddressID;
			}
			set
			{
				if ((this._EmailAddressID != value))
				{
					this.OnEmailAddressIDChanging(value);
					this.SendPropertyChanging();
					this._EmailAddressID = value;
					this.SendPropertyChanged("EmailAddressID");
					this.OnEmailAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EmailAddress", Storage="_EmailAddress1", DbType="NVarChar(50)")]
		public string EmailAddress1
		{
			get
			{
				return this._EmailAddress1;
			}
			set
			{
				if ((this._EmailAddress1 != value))
				{
					this.OnEmailAddress1Changing(value);
					this.SendPropertyChanging();
					this._EmailAddress1 = value;
					this.SendPropertyChanged("EmailAddress1");
					this.OnEmailAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_EmailAddress", Storage="_Person", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.EmailAddresses.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.EmailAddresses.Add(this);
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.Password")]
	public partial class Password : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private string _PasswordHash;
		
		private string _PasswordSalt;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Password()
		{
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Password", Storage="_Person", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Password = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Password = this;
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private string _PersonType;
		
		private bool _NameStyle;
		
		private string _Title;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Suffix;
		
		private int _EmailPromotion;
		
		private System.Xml.Linq.XElement _AdditionalContactInfo;
		
		private System.Xml.Linq.XElement _Demographics;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntitySet<BusinessEntityContact> _BusinessEntityContacts;
		
		private EntitySet<EmailAddress> _EmailAddresses;
		
		private EntityRef<Password> _Password;
		
		private EntitySet<PersonPhone> _PersonPhones;
		
		private EntityRef<BusinessEntity> _BusinessEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnPersonTypeChanging(string value);
    partial void OnPersonTypeChanged();
    partial void OnNameStyleChanging(bool value);
    partial void OnNameStyleChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnEmailPromotionChanging(int value);
    partial void OnEmailPromotionChanged();
    partial void OnAdditionalContactInfoChanging(System.Xml.Linq.XElement value);
    partial void OnAdditionalContactInfoChanged();
    partial void OnDemographicsChanging(System.Xml.Linq.XElement value);
    partial void OnDemographicsChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Person()
		{
			this._Employee = default(EntityRef<Employee>);
			this._BusinessEntityContacts = new EntitySet<BusinessEntityContact>(new Action<BusinessEntityContact>(this.attach_BusinessEntityContacts), new Action<BusinessEntityContact>(this.detach_BusinessEntityContacts));
			this._EmailAddresses = new EntitySet<EmailAddress>(new Action<EmailAddress>(this.attach_EmailAddresses), new Action<EmailAddress>(this.detach_EmailAddresses));
			this._Password = default(EntityRef<Password>);
			this._PersonPhones = new EntitySet<PersonPhone>(new Action<PersonPhone>(this.attach_PersonPhones), new Action<PersonPhone>(this.detach_PersonPhones));
			this._BusinessEntity = default(EntityRef<BusinessEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._BusinessEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonType", DbType="NChar(2) NOT NULL", CanBeNull=false)]
		public string PersonType
		{
			get
			{
				return this._PersonType;
			}
			set
			{
				if ((this._PersonType != value))
				{
					this.OnPersonTypeChanging(value);
					this.SendPropertyChanging();
					this._PersonType = value;
					this.SendPropertyChanged("PersonType");
					this.OnPersonTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameStyle", DbType="Bit NOT NULL")]
		public bool NameStyle
		{
			get
			{
				return this._NameStyle;
			}
			set
			{
				if ((this._NameStyle != value))
				{
					this.OnNameStyleChanging(value);
					this.SendPropertyChanging();
					this._NameStyle = value;
					this.SendPropertyChanged("NameStyle");
					this.OnNameStyleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(8)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suffix", DbType="NVarChar(10)")]
		public string Suffix
		{
			get
			{
				return this._Suffix;
			}
			set
			{
				if ((this._Suffix != value))
				{
					this.OnSuffixChanging(value);
					this.SendPropertyChanging();
					this._Suffix = value;
					this.SendPropertyChanged("Suffix");
					this.OnSuffixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailPromotion", DbType="Int NOT NULL")]
		public int EmailPromotion
		{
			get
			{
				return this._EmailPromotion;
			}
			set
			{
				if ((this._EmailPromotion != value))
				{
					this.OnEmailPromotionChanging(value);
					this.SendPropertyChanging();
					this._EmailPromotion = value;
					this.SendPropertyChanged("EmailPromotion");
					this.OnEmailPromotionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalContactInfo", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement AdditionalContactInfo
		{
			get
			{
				return this._AdditionalContactInfo;
			}
			set
			{
				if ((this._AdditionalContactInfo != value))
				{
					this.OnAdditionalContactInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalContactInfo = value;
					this.SendPropertyChanged("AdditionalContactInfo");
					this.OnAdditionalContactInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Demographics", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Demographics
		{
			get
			{
				return this._Demographics;
			}
			set
			{
				if ((this._Demographics != value))
				{
					this.OnDemographicsChanging(value);
					this.SendPropertyChanging();
					this._Demographics = value;
					this.SendPropertyChanged("Demographics");
					this.OnDemographicsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Employee", Storage="_Employee", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsUnique=true, IsForeignKey=false)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Person = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_BusinessEntityContact", Storage="_BusinessEntityContacts", ThisKey="BusinessEntityID", OtherKey="PersonID")]
		public EntitySet<BusinessEntityContact> BusinessEntityContacts
		{
			get
			{
				return this._BusinessEntityContacts;
			}
			set
			{
				this._BusinessEntityContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_EmailAddress", Storage="_EmailAddresses", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID")]
		public EntitySet<EmailAddress> EmailAddresses
		{
			get
			{
				return this._EmailAddresses;
			}
			set
			{
				this._EmailAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Password", Storage="_Password", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsUnique=true, IsForeignKey=false)]
		public Password Password
		{
			get
			{
				return this._Password.Entity;
			}
			set
			{
				Password previousValue = this._Password.Entity;
				if (((previousValue != value) 
							|| (this._Password.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Password.Entity = null;
						previousValue.Person = null;
					}
					this._Password.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Password");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonPhone", Storage="_PersonPhones", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID")]
		public EntitySet<PersonPhone> PersonPhones
		{
			get
			{
				return this._PersonPhones;
			}
			set
			{
				this._PersonPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessEntity_Person", Storage="_BusinessEntity", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public BusinessEntity BusinessEntity
		{
			get
			{
				return this._BusinessEntity.Entity;
			}
			set
			{
				BusinessEntity previousValue = this._BusinessEntity.Entity;
				if (((previousValue != value) 
							|| (this._BusinessEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessEntity.Entity = null;
						previousValue.Person = null;
					}
					this._BusinessEntity.Entity = value;
					if ((value != null))
					{
						value.Person = this;
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(int);
					}
					this.SendPropertyChanged("BusinessEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessEntityContacts(BusinessEntityContact entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_BusinessEntityContacts(BusinessEntityContact entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_EmailAddresses(EmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_EmailAddresses(EmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PersonPhones(PersonPhone entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonPhones(PersonPhone entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.PersonPhone")]
	public partial class PersonPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessEntityID;
		
		private string _PhoneNumber;
		
		private int _PhoneNumberTypeID;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<PhoneNumberType> _PhoneNumberType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessEntityIDChanging(int value);
    partial void OnBusinessEntityIDChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberTypeIDChanging(int value);
    partial void OnPhoneNumberTypeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public PersonPhone()
		{
			this._Person = default(EntityRef<Person>);
			this._PhoneNumberType = default(EntityRef<PhoneNumberType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessEntityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessEntityID
		{
			get
			{
				return this._BusinessEntityID;
			}
			set
			{
				if ((this._BusinessEntityID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessEntityIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessEntityID = value;
					this.SendPropertyChanged("BusinessEntityID");
					this.OnBusinessEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhoneNumberTypeID
		{
			get
			{
				return this._PhoneNumberTypeID;
			}
			set
			{
				if ((this._PhoneNumberTypeID != value))
				{
					if (this._PhoneNumberType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneNumberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberTypeID = value;
					this.SendPropertyChanged("PhoneNumberTypeID");
					this.OnPhoneNumberTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonPhone", Storage="_Person", ThisKey="BusinessEntityID", OtherKey="BusinessEntityID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonPhones.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonPhones.Add(this);
						this._BusinessEntityID = value.BusinessEntityID;
					}
					else
					{
						this._BusinessEntityID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneNumberType_PersonPhone", Storage="_PhoneNumberType", ThisKey="PhoneNumberTypeID", OtherKey="PhoneNumberTypeID", IsForeignKey=true)]
		public PhoneNumberType PhoneNumberType
		{
			get
			{
				return this._PhoneNumberType.Entity;
			}
			set
			{
				PhoneNumberType previousValue = this._PhoneNumberType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneNumberType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneNumberType.Entity = null;
						previousValue.PersonPhones.Remove(this);
					}
					this._PhoneNumberType.Entity = value;
					if ((value != null))
					{
						value.PersonPhones.Add(this);
						this._PhoneNumberTypeID = value.PhoneNumberTypeID;
					}
					else
					{
						this._PhoneNumberTypeID = default(int);
					}
					this.SendPropertyChanged("PhoneNumberType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.PhoneNumberType")]
	public partial class PhoneNumberType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhoneNumberTypeID;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<PersonPhone> _PersonPhones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneNumberTypeIDChanging(int value);
    partial void OnPhoneNumberTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public PhoneNumberType()
		{
			this._PersonPhones = new EntitySet<PersonPhone>(new Action<PersonPhone>(this.attach_PersonPhones), new Action<PersonPhone>(this.detach_PersonPhones));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhoneNumberTypeID
		{
			get
			{
				return this._PhoneNumberTypeID;
			}
			set
			{
				if ((this._PhoneNumberTypeID != value))
				{
					this.OnPhoneNumberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberTypeID = value;
					this.SendPropertyChanged("PhoneNumberTypeID");
					this.OnPhoneNumberTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneNumberType_PersonPhone", Storage="_PersonPhones", ThisKey="PhoneNumberTypeID", OtherKey="PhoneNumberTypeID")]
		public EntitySet<PersonPhone> PersonPhones
		{
			get
			{
				return this._PersonPhones;
			}
			set
			{
				this._PersonPhones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonPhones(PersonPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumberType = this;
		}
		
		private void detach_PersonPhones(PersonPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumberType = null;
		}
	}
}
#pragma warning restore 1591
