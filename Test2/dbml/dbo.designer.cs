#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test2.dbml
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AdventureWorks2014")]
	public partial class dboDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAWBuildVersion(AWBuildVersion instance);
    partial void UpdateAWBuildVersion(AWBuildVersion instance);
    partial void DeleteAWBuildVersion(AWBuildVersion instance);
    partial void InsertErrorLog(ErrorLog instance);
    partial void UpdateErrorLog(ErrorLog instance);
    partial void DeleteErrorLog(ErrorLog instance);
    partial void InsertDatabaseLog(DatabaseLog instance);
    partial void UpdateDatabaseLog(DatabaseLog instance);
    partial void DeleteDatabaseLog(DatabaseLog instance);
    #endregion
		
		public dboDataContext() : 
				base(global::Test2.Properties.Settings.Default.AdventureWorks2014ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dboDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dboDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dboDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dboDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AWBuildVersion> AWBuildVersions
		{
			get
			{
				return this.GetTable<AWBuildVersion>();
			}
		}
		
		public System.Data.Linq.Table<ErrorLog> ErrorLogs
		{
			get
			{
				return this.GetTable<ErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseLog> DatabaseLogs
		{
			get
			{
				return this.GetTable<DatabaseLog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AWBuildVersion")]
	public partial class AWBuildVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _SystemInformationID;
		
		private string _Database_Version;
		
		private System.DateTime _VersionDate;
		
		private System.DateTime _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemInformationIDChanging(byte value);
    partial void OnSystemInformationIDChanged();
    partial void OnDatabase_VersionChanging(string value);
    partial void OnDatabase_VersionChanged();
    partial void OnVersionDateChanging(System.DateTime value);
    partial void OnVersionDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public AWBuildVersion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemInformationID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte SystemInformationID
		{
			get
			{
				return this._SystemInformationID;
			}
			set
			{
				if ((this._SystemInformationID != value))
				{
					this.OnSystemInformationIDChanging(value);
					this.SendPropertyChanging();
					this._SystemInformationID = value;
					this.SendPropertyChanged("SystemInformationID");
					this.OnSystemInformationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Database Version]", Storage="_Database_Version", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Database_Version
		{
			get
			{
				return this._Database_Version;
			}
			set
			{
				if ((this._Database_Version != value))
				{
					this.OnDatabase_VersionChanging(value);
					this.SendPropertyChanging();
					this._Database_Version = value;
					this.SendPropertyChanged("Database_Version");
					this.OnDatabase_VersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDate", DbType="DateTime NOT NULL")]
		public System.DateTime VersionDate
		{
			get
			{
				return this._VersionDate;
			}
			set
			{
				if ((this._VersionDate != value))
				{
					this.OnVersionDateChanging(value);
					this.SendPropertyChanging();
					this._VersionDate = value;
					this.SendPropertyChanged("VersionDate");
					this.OnVersionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ErrorLog")]
	public partial class ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorLogID;
		
		private System.DateTime _ErrorTime;
		
		private string _UserName;
		
		private int _ErrorNumber;
		
		private System.Nullable<int> _ErrorSeverity;
		
		private System.Nullable<int> _ErrorState;
		
		private string _ErrorProcedure;
		
		private System.Nullable<int> _ErrorLine;
		
		private string _ErrorMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorLogIDChanging(int value);
    partial void OnErrorLogIDChanged();
    partial void OnErrorTimeChanging(System.DateTime value);
    partial void OnErrorTimeChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnErrorNumberChanging(int value);
    partial void OnErrorNumberChanged();
    partial void OnErrorSeverityChanging(System.Nullable<int> value);
    partial void OnErrorSeverityChanged();
    partial void OnErrorStateChanging(System.Nullable<int> value);
    partial void OnErrorStateChanged();
    partial void OnErrorProcedureChanging(string value);
    partial void OnErrorProcedureChanged();
    partial void OnErrorLineChanging(System.Nullable<int> value);
    partial void OnErrorLineChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public ErrorLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorLogID
		{
			get
			{
				return this._ErrorLogID;
			}
			set
			{
				if ((this._ErrorLogID != value))
				{
					this.OnErrorLogIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorLogID = value;
					this.SendPropertyChanged("ErrorLogID");
					this.OnErrorLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorTime", DbType="DateTime NOT NULL")]
		public System.DateTime ErrorTime
		{
			get
			{
				return this._ErrorTime;
			}
			set
			{
				if ((this._ErrorTime != value))
				{
					this.OnErrorTimeChanging(value);
					this.SendPropertyChanging();
					this._ErrorTime = value;
					this.SendPropertyChanged("ErrorTime");
					this.OnErrorTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorNumber", DbType="Int NOT NULL")]
		public int ErrorNumber
		{
			get
			{
				return this._ErrorNumber;
			}
			set
			{
				if ((this._ErrorNumber != value))
				{
					this.OnErrorNumberChanging(value);
					this.SendPropertyChanging();
					this._ErrorNumber = value;
					this.SendPropertyChanged("ErrorNumber");
					this.OnErrorNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorSeverity", DbType="Int")]
		public System.Nullable<int> ErrorSeverity
		{
			get
			{
				return this._ErrorSeverity;
			}
			set
			{
				if ((this._ErrorSeverity != value))
				{
					this.OnErrorSeverityChanging(value);
					this.SendPropertyChanging();
					this._ErrorSeverity = value;
					this.SendPropertyChanged("ErrorSeverity");
					this.OnErrorSeverityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorState", DbType="Int")]
		public System.Nullable<int> ErrorState
		{
			get
			{
				return this._ErrorState;
			}
			set
			{
				if ((this._ErrorState != value))
				{
					this.OnErrorStateChanging(value);
					this.SendPropertyChanging();
					this._ErrorState = value;
					this.SendPropertyChanged("ErrorState");
					this.OnErrorStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorProcedure", DbType="NVarChar(126)")]
		public string ErrorProcedure
		{
			get
			{
				return this._ErrorProcedure;
			}
			set
			{
				if ((this._ErrorProcedure != value))
				{
					this.OnErrorProcedureChanging(value);
					this.SendPropertyChanging();
					this._ErrorProcedure = value;
					this.SendPropertyChanged("ErrorProcedure");
					this.OnErrorProcedureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorLine", DbType="Int")]
		public System.Nullable<int> ErrorLine
		{
			get
			{
				return this._ErrorLine;
			}
			set
			{
				if ((this._ErrorLine != value))
				{
					this.OnErrorLineChanging(value);
					this.SendPropertyChanging();
					this._ErrorLine = value;
					this.SendPropertyChanged("ErrorLine");
					this.OnErrorLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DatabaseLog")]
	public partial class DatabaseLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DatabaseLogID;
		
		private System.DateTime _PostTime;
		
		private string _DatabaseUser;
		
		private string _Event;
		
		private string _Schema;
		
		private string _Object;
		
		private string _TSQL;
		
		private System.Xml.Linq.XElement _XmlEvent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDatabaseLogIDChanging(int value);
    partial void OnDatabaseLogIDChanged();
    partial void OnPostTimeChanging(System.DateTime value);
    partial void OnPostTimeChanged();
    partial void OnDatabaseUserChanging(string value);
    partial void OnDatabaseUserChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    partial void OnSchemaChanging(string value);
    partial void OnSchemaChanged();
    partial void OnObjectChanging(string value);
    partial void OnObjectChanged();
    partial void OnTSQLChanging(string value);
    partial void OnTSQLChanged();
    partial void OnXmlEventChanging(System.Xml.Linq.XElement value);
    partial void OnXmlEventChanged();
    #endregion
		
		public DatabaseLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DatabaseLogID
		{
			get
			{
				return this._DatabaseLogID;
			}
			set
			{
				if ((this._DatabaseLogID != value))
				{
					this.OnDatabaseLogIDChanging(value);
					this.SendPropertyChanging();
					this._DatabaseLogID = value;
					this.SendPropertyChanged("DatabaseLogID");
					this.OnDatabaseLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostTime", DbType="DateTime NOT NULL")]
		public System.DateTime PostTime
		{
			get
			{
				return this._PostTime;
			}
			set
			{
				if ((this._PostTime != value))
				{
					this.OnPostTimeChanging(value);
					this.SendPropertyChanging();
					this._PostTime = value;
					this.SendPropertyChanged("PostTime");
					this.OnPostTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseUser", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string DatabaseUser
		{
			get
			{
				return this._DatabaseUser;
			}
			set
			{
				if ((this._DatabaseUser != value))
				{
					this.OnDatabaseUserChanging(value);
					this.SendPropertyChanging();
					this._DatabaseUser = value;
					this.SendPropertyChanged("DatabaseUser");
					this.OnDatabaseUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Schema]", Storage="_Schema", DbType="NVarChar(128)")]
		public string Schema
		{
			get
			{
				return this._Schema;
			}
			set
			{
				if ((this._Schema != value))
				{
					this.OnSchemaChanging(value);
					this.SendPropertyChanging();
					this._Schema = value;
					this.SendPropertyChanged("Schema");
					this.OnSchemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Object", DbType="NVarChar(128)")]
		public string Object
		{
			get
			{
				return this._Object;
			}
			set
			{
				if ((this._Object != value))
				{
					this.OnObjectChanging(value);
					this.SendPropertyChanging();
					this._Object = value;
					this.SendPropertyChanged("Object");
					this.OnObjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TSQL", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TSQL
		{
			get
			{
				return this._TSQL;
			}
			set
			{
				if ((this._TSQL != value))
				{
					this.OnTSQLChanging(value);
					this.SendPropertyChanging();
					this._TSQL = value;
					this.SendPropertyChanged("TSQL");
					this.OnTSQLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XmlEvent", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement XmlEvent
		{
			get
			{
				return this._XmlEvent;
			}
			set
			{
				if ((this._XmlEvent != value))
				{
					this.OnXmlEventChanging(value);
					this.SendPropertyChanging();
					this._XmlEvent = value;
					this.SendPropertyChanged("XmlEvent");
					this.OnXmlEventChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
